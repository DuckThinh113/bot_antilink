const { info, error, success } = require('../../utils/Console');
const { readdirSync } = require('fs');
const DiscordBot = require('../DiscordBot');
const Component = require('../../structure/Component');
const AutocompleteComponent = require('../../structure/AutocompleteComponent');
const Event = require('../../structure/Event');

class EventsHandler {
    client;

    /**
     * @param {DiscordBot} client 
     */
    constructor(client) {
        this.client = client;
    }

    load = () => {
        let total = 0;

        for (const directory of readdirSync('./src/events/')) {
            for (const file of readdirSync(`./src/events/${directory}`).filter((f) => f.endsWith('.js'))) {
                try {
                    /**
                     * @type {Event['data']}
                     */
                    const modulePath = `../../events/${directory}/${file}`;
                    const module = require(modulePath);

                    if (!module) {
                        error(`‚ö† Kh√¥ng th·ªÉ t·∫£i s·ª± ki·ªán ${file} (Module r·ªóng)`);
                        continue;
                    }

                    if (module.__type__ === 5) {
                        if (!module.event || !module.run) {
                            error(`‚ö† Kh√¥ng th·ªÉ t·∫£i s·ª± ki·ªán ${file} (Thi·∫øu event ho·∫∑c run)`);
                            continue;
                        }

                        if (module.once) {
                            this.client.once(module.event, (...args) => module.run(this.client, ...args));
                        } else {
                            this.client.on(module.event, (...args) => module.run(this.client, ...args));
                        }

                        info(`‚úÖ ƒê√£ t·∫£i s·ª± ki·ªán: ${file}`);
                        total++;
                    } else {
                        error(`‚ùå Lo·∫°i s·ª± ki·ªán kh√¥ng h·ª£p l·ªá (${module.__type__}) trong file ${file}`);
                    }
                } catch (err) {
                    error(`‚ùå L·ªói khi t·∫£i s·ª± ki·ªán ${file}: ${err.message}`);
                }
            }
        }

        success(`üéâ ƒê√£ t·∫£i th√†nh c√¥ng ${total} s·ª± ki·ªán.`);
    }
}

module.exports = EventsHandler;
